#!/usr/bin/env bash

if [[ -n ${DEBUG} ]] ; then set -x ; fi

usage() {
  cat <<EOS
Usage:

  $0 <action> [options]

Actions:

  prepare   - Prepare environment for running automation.
  provision - Provision jump box.

EOS
}

log() {
  echo -e "[${action}] $*"
}

fail() {
  log fail "$*" >&2
  exit 1
}

check_install_terraform()  {
  _version=0.6.4
  _install=false

  log "Checking for terraform CLI ${_version} ..."
  if ! command -v terraform &>/dev/null
  then _install=true
  else
    if [[ $(terraform -v | awk '/Terraform v/{print $2}') != "v${_version}" ]]
    then _install=true
    fi 
  fi

  if [[ ${_install} == true ]]
  then 
    log "Installing terraform CLI ${_version} ..."
    curl -sOL "https://dl.bintray.com/mitchellh/terraform/terraform_${_version}_darwin_amd64.zip"
    unzip -d /usr/local/bin "terraform_${_version}_darwin_amd64.zip"
    rm -f "terraform_${_version}_darwin_amd64.zip"
    log "OK, terraform CLI ${_version} installed."
  else 
    log "OK, terraform CLI is ${_version}"
  fi
}

provision_vpc() {
  cd terraform/aws
  case ${1} in 
    (plan)
      terraform get -update
      terraform plan -module-depth=-1 -var-file terraform.tfvars -out terraform.tfplan
      ;;
    (apply)
      terraform apply -var-file terraform.tfvars
      ;;
    (destroy)
      terraform plan -destroy -var-file terraform.tfvars -out terraform.tfplan
      terraform apply terraform.tfplan
      ;;
    (clean)
      rm -fR .terraform/ terraform.tfplan terraform.tfstate
      ;;
    (*)
      fail "Unknown terraform action '${1}', expected one of {plan,apply,destroy,clean}"
      ;;
  esac
}

action=$1 ; shift || true
case ${action} in
  (vpc)
    provision_vpc $*
    ;;
  (prepare)
    check_install_terraform
    ;;
  (*|help|-h)
    usage
    ;;
esac
